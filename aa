#!/bin/sh
# vim: sts=2 sw=2 et
#
# Serval Batphone
# Copyright (C) 2011 Paul Gardner-Stephen 
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

ME="${0##*/}"
HERE=`dirname "$0"`
DEV=DEVICE
APK=bin/batphone.apk
APK_DEBUG=bin/batphone-debug.apk
AHOME=/data/data/org.servalproject
DNA_BIN=$HERE/libs/armeabi/dna

trap 'stat=$?; rm -rf /tmp/$ME-$$-*; exit $stat' 0 1 2 15

usage() {
  echo	  "Usage: ${0##*/} [options] action [args ... ;] [action [args ... ;] ...]"
  echo	  "Options:"
  echo	  "   -n        Dry run; print commands but do not execute"
  echo	  "   -l        List connected devices and exit"
  echo	  "   -s DEV    Perform actions only on DEV (can give more than once)"
  echo	  "   -h, -?    Display this help and exit"
  echo	  "Actions:"
  echo	  "   ps                             List all serval processes"
  echo	  "   sh|shell [cmd args... ;]       Run shell command (interactive if no cmd)"
  echo	  "   su|sudo cmd [args... ;]        Run shell command as superuser"
  echo	  "   au|app-uninstall               Uninstall org.servalproject application"
  echo	  "   ai|app-install                 Install $APK"
  echo	  "   aid|app-install-debug          Install $APK_DEBUG"
  echo	  "   ar|app-reinstall               Reinstall $APK"
  echo	  "   ard|app-reinstall-debug        Reinstall $APK_DEBUG"
  echo	  "   as|app-start                   Start org.servalproject application"
  echo	  "   du|dna-unlock                  Unlock dna binary (chmod a+x bin/dna; chmod a+rw var/hlr.dat"
  echo	  "   dl|dna-lock                    Lock dna binary (chmod go-x bin/dna; chmod go-rw var/hlr.dat"
  echo	  "   dp|dna-push                    Push dna binary, if no permission then unlock and retry"
  echo	  "   dq|dna-query                   Detect if dna is running (greps ps output)"
  echo	  "   dk|dna-kill                    Kill dna (if running)"
  echo	  "   ds|dna-start [args... ;]       Run dna in foreground (if not running) with given args"
  echo	  "   dd|dna-dump-hlr                Dump dna's HLR to stdout"
  echo	  "   dna|dna-invoke [args... ;]     Invoke dna with arguments"
  echo	  "   lc|logcat [args... ;]          Run adb logcat with arguments"
  echo	  "   fp|file-push path dest [;]     Push single file"
  echo	  "   fp|file-push path... dest/ [;] Push many files to single directory"
}

# The following functions implement actions.  Functions starting with underscore '_' are generally
# not exposed directly to the command line.

_devices() {
  adb devices | awk 'NF == 2 && $2 == "device" {print $1}'
}

shell() {
  run adb -s $DEV shell "$@"
}

shell_sudo() {
  run adb -s $DEV shell echo "$@" \| su
}

serval_processes() {
  echo "+ adb -s $DEV shell ps | grep -i serval"
  if ! $flag_dryrun; then
    adb -s $DEV shell ps | sed -n -e '1p' -e '/serval/Ip'
  fi
}

app_uninstall() {
  run adb -s $DEV uninstall org.servalproject
}

app_install() {
  run adb -s $DEV install "$1"
}

app_reinstall() {
  run adb -s $DEV install -r "$1"
}

app_start() {
  run adb -s $DEV shell am start -a android.intent.action.MAIN -n org.servalproject/.Main
}

dna_push() {
  if ! _dna_push 2>/tmp/$ME-$$-pusherrs; then
    if grep -q -i 'permission denied' /tmp/$ME-$$-pusherrs; then
      dna_unlock
      _dna_push
    else
      cat /tmp/$ME-$$-pusherrs >&2
    fi
  fi
}

_dna_push() {
  run adb -s $DEV push "$DNA_BIN" "$AHOME/bin/dna"
}

dna_unlock() {
  run adb -s $DEV shell "cd $AHOME && echo chmod 777 bin bin/dna var\; chmod 666 var/hlr.dat | su"
}

dna_lock() {
  run adb -s $DEV shell "cd $AHOME && echo chmod 700 bin bin/dna var\; chmod 600 var/hlr.dat | su"
}

dna_query() {
  dna_pid=`_dna_pid`
  if [ -n "$dna_pid" ] ; then
    echo "+ dna is running, pid=$dna_pid"
  else
    echo "+ dna is not running"
  fi
}

dna_kill() {
  dna_pid=`_dna_pid`
  if [ -n "$dna_pid" ] ; then
    _kill $dna_pid
  else
    echo "+ dna is not running -- not killed"
  fi
}

dna_start() {
  dna_pid=`_dna_pid`
  if [ -n "$dna_pid" ] ; then
    echo "+ dna is already running, pid=$dna_pid -- not started"
  else
    _dna_start "$@"
  fi
}

dna_dump_hlr() {
  _dna_invoke -E -
}

dna_invoke() {
  _dna_invoke "$@"
}

_dna_invoke() {
  # If first arg starts with '-' then using old-style dna command line, so pass
  # HLR path on command line.  Otherwise, using new-style, and HLR path is in
  # dna's persistent config, so no need to pass it on command line.
  case "$1" in
  -*) set -- -f var/hlr.dat "$@";;
  esac
  run adb -s $DEV shell cd $AHOME '&&' "$AHOME/bin/dna" "$@"
}

_dna_start() {
  _dna_invoke -S 1 -n "$@"
}

_dna_pid() {
  if ! $flag_dryrun; then
    adb -s $DEV shell ps | tr -d '\r' | awk '$9 == "'"$AHOME/bin/dna"'" { print $2 }'
  fi
}

_kill() {
  run adb -s $DEV shell echo kill $1 \| su
}

_extract_dids() {
  # This incantation extracts all the DIDs from a dna HLR dump.
  sed -n -e '/^var=80:00 /{n;p}' |
    /usr/bin/printf "`sed -e 's/%/%%/g'`" |
    od -w1024 -tx1 |
    sed -r -n -e '/^[^ ]{3,} /s///p' |
    sed 's/ //g' |
    sed -e 's/[Ff].*//' -e 's/[Aa]/*/g' -e 's/[Bb]/#/g' -e 's/[Cc]/+/g'
}

logcat() {
  run adb -s $DEV logcat "$@"
}

file_push() {
  local dstarg
  eval dstarg="\$$#"
  local i=1
  local src
  local dst
  while [ $i -lt $# ]; do
    eval src=\"\$$i\"
    dst="$dstarg"
    case "$dstarg" in
    */) dst="$dstarg${src##*/}";;
    esac
    run adb -s $DEV push "$src" "$dst"
    i=$(($i + 1))
  done
}

# Add shell quotation to the given arguments, so that when expanded using 'eval', the exact same
# argument results.  This makes our argument handling fully immune to spaces and shell
# metacharacters.
shellarg() {
  local arg
  local sep=
  for arg; do
    /bin/echo -n "$sep"
    case `/bin/echo "$arg" | sed -e 's/[A-Za-z_0-9.,+\/-]//g'` in
    '') /bin/echo -n "$arg";;
    *) /bin/echo -n "'"; /bin/echo -n "$arg" | sed -e "s/'/'\\\\''/g"; /bin/echo -n "'";;
    esac
    sep=' '
  done
  echo
}

# The function we use to invoke commands.  This implements the effect of the -n (dry run) option.
run() {
  echo -n "+ "; shellarg "$@"
  if ! $flag_dryrun; then
    "$@"
  fi
}

# Parse command-line options (leading arguments starting with '-').
flag_dryrun=false
flag_list=false
devices=
device_opts=
while getopts "Sndls:h?" opt
do
  case $opt in
  n) flag_dryrun=true;;
  l) flag_list=true;;
  s) devices="$devices $OPTARG"; device_opts="$device_opts -s '$OPTARG'";;
  h|\?) usage; exit 0;;
  *) echo "${0##*/}: unsupported option '$opt'" >&2; exit 1;;
  esac
done
shift $(($OPTIND - 1))

# If the -l option was given, then print a list of connected devices with their
# DIDs (phone numbers), and exit.
if $flag_list; then
  for DEV in `_devices`
  do
    echo -n "$DEV"
    for DID in `dna_dump_hlr | _extract_dids`
    do
      echo -n " ($DID)"
    done
    echo
  done
  exit 0
fi

# If the script was invoked with no arguments, then print a helpful usage message.
if [ $# -eq 0 ]; then
  usage
  exit 0
fi

# If we haven't already, get a list of all connected devices.
if [ -z "$devices" ]; then
  devices=`_devices`
fi

# Parse remaining command-line arguments into a string of shell commands that can be executed using
# 'eval'.  Be very careful to preserve all arguments intact, so that spaces, quotes, metacharacters
# etc. get passed verbatim to the adb command.
actions=true
interactive=false
shiftargs() {
  actions="$actions ; $1"
  shift
  NARGS=0
  while [ $# -ne 0 -a "$1" != ';' ]
  do
    actions="$actions `shellarg \"$1\"`"
    NARGS=$(($NARGS+1))
    eval ARG$NARGS=\"\$1\"
    LASTARG="$1"
    shift
  done
}
while [ $# -ne 0 ]
do
  action="$1"
  shift
  case $action in
  \; ) shift;;
  sh | shell )		      shiftargs 'shell' "$@"; shift $NARGS; [ $NARGS -eq 0 ] && interactive=true;;
  su | sudo )		      shiftargs 'shell_sudo' "$@"; shift $NARGS;;
  ps )			      actions="$actions ; serval_processes";;
  au | app-uninstall )	      actions="$actions ; app_uninstall";;
  ai | app-install )	      actions="$actions ; app_install '$APK'";;
  aid | app-install-debug )   actions="$actions ; app_install '$APK_DEBUG'";;
  ar | app-reinstall )	      actions="$actions ; app_reinstall '$APK'";;
  ard | app-reinstall-debug ) actions="$actions ; app_reinstall '$APK_DEBUG'";;
  as | app-start )	      actions="$actions ; app_start";;
  du | dna-unlock )	      actions="$actions ; dna_unlock";;
  dl | dna-lock )	      actions="$actions ; dna_lock";;
  dp | dna-push )	      actions="$actions ; dna_push";;
  dq | dna-query )	      actions="$actions ; dna_query";;
  dk | dna-kill )	      actions="$actions ; dna_kill";;
  dna | dna-invoke )	      shiftargs 'dna_invoke' "$@"; shift $NARGS;;
  ds | dna-start )	      shiftargs 'dna_start' "$@"; shift $NARGS;;
  dd | dna-dump-hlr )	      actions="$actions ; dna_dump_hlr";;
  lc | logcat )	              shiftargs 'logcat' "$@"; shift $NARGS;;
  fp | file-push )
    shiftargs 'file_push' "$@"
    shift $NARGS
    if [ $NARGS -lt 2 ]; then
      echo "Action '$action' missing argument -- see ${0##*/} -h for help." >&2
      exit 1
    fi
    if [ $NARGS -gt 2 ]; then
      case "$LASTARG" in
      */) ;;
      *)
        echo "Action '$action' last argument must be a directory and end in '/' -- see ${0##*/} -h for help." >&2
        exit 1
        ;;
      esac
    fi
    ;;
  *)
    echo "Unsupported action '$action' -- see ${0##*/} -h for help." >&2
    exit 1
    ;;
  esac
done

# Execute all the actions, and collate their outputs on the terminal in the best fashion available.
if $flag_dryrun; then
  for DEV in $devices
  do
    eval "$actions"
  done
else
  if $interactive; then
    set -- $devices
    if [ $# -gt 1 ]; then
      echo "$ME: interactive command only works on one device at a time" >&2
      echo "Use the -s DEVICE option to select one device; see $ME -h for more information." >&2
      exit 1
    fi
    DEV="$1"
    echo "+ START"
    eval "$actions"
    echo "+ DONE"
  else
    mkdir /tmp/$ME-$$-logs || exit $?
    tailargs=
    for DEV in $devices
    do
      echo "+ START" >/tmp/$ME-$$-logs/$DEV
      tailargs="$tailargs -f /tmp/$ME-$$-logs/$DEV"
      (
	eval "$actions"
	echo "+ DONE"
      ) >>/tmp/$ME-$$-logs/$DEV 2>&1 &
    done
    case `multitail -V 2>&1` in
    *'--*- multitail '*)
      multitail $tailargs
      ;;
    *)
      tail $tailargs
      ;;
    esac
  fi
fi
