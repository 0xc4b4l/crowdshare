; extensions.conf - the Asterisk dial plan

[general]

static=yes
writeprotect=no
clearglobalvars=no


[globals]
CONSOLE=Console/dsp				; Console interface for demo
IAXINFO=guest					; IAXtel username/password
TRUNK=Zap/g2					; Trunk interface
TRUNKMSD=1					; MSD digits to strip (usually 1 or 0)
;adding by me
CHOSENLANG=en
DNAPATH=/data/data/org.servalproject/dna
SOUNDPATH=/data/data/org.servalproject/sound
VOICESIGPATH=/data/data/org.servalproject/voiceSignature
TEMPPATH=/data/data/org.servalproject/tmp

[irv]
exten => s, 1, Wait(2)
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/welcomeForFirstUse)
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/changeLanguage)
exten => s, n, WaitExten() ;wait for the language select

exten => 1, 1, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/englishLang)
exten => 1, n, Goto(registerPhoneNumber,s,1);

exten => 2, 1, Set(GLOBAL(CHOSENLANG)=fr)
exten => 2, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/frenchLang) 
exten => 2, n, Goto(registerPhoneNumber,s,1);

;exten => t, n, Background(/tmp/sound/${GLOBAL(CHOSENLANG)}/changeLanguage)


[registerPhoneNumber]
;check if the user have already a number
exten => s, 1, AGI(${GLOBAL(DNAPATH)}/isNumberSet)
exten => s, n, ReadFile(isNumberSet=${GLOBAL(TEMPPATH)}/isNumberSet.tmp,1)
exten => s, n, NoOp(${isNumberSet})
exten => s, n, GotoIf($[${isNumberSet}=1]?yourNumberIs:registerYourPhoneNumber)

exten => s, n(yourNumberIs), Wait(2)
exten => s, n, ReadFile(myNumber=${GLOBAL(TEMPPATH)}/myNumber.tmp)
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/yourNumberIs)
exten => s, n, SayPhonetic(${myNumber})
exten => s, n, HangUp();

exten => s, n(registerYourPhoneNumber), Wait(2)
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/registerPhone)
exten => s, n, Read(PHONENUMBER,,10,,2)
exten => s, n, Wait(2)
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/yourNumberIs)
exten => s, n, SayPhonetic(${PHONENUMBER})


exten => s, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/setAnotherNumber)
exten => s, n, WaitExten()
;you do not like your number go back to register your phone number
exten => 1, 1,Goto(registerPhoneNumber,s,registerYourPhoneNumber)
;you like it continue
exten => #, 1, Set(GLOBAL(MYPHONENUMBER)=${PHONENUMBER})
exten => #, n, Goto(recordVoiceSignature,s,1)

[recordVoiceSignature]
exten => s, 1, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/registerVoiceSignature)
exten => s, n, Wait(2)
exten => s, n, Record(${GLOBAL(VOICESIGPATH)}/${GLOBAL(MYPHONENUMBER)}.gsm)
exten => s, n, Wait(2)
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/yourVoiceSignature)
exten => s, n, Playback(${GLOBAL(VOICESIGPATH)}/${GLOBAL(MYPHONENUMBER)})

;set another voice sig?
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/setAnotherVoiceSig)
exten => s, n, WaitExten()
;you do not like your voice signature re-record it
exten => 1, 1, Goto(recordVoiceSignature,s,1)
;you like it and we got all of the information : number and voice signature so we can now register the phone number in the dna
exten => #, 1, AGI(${GLOBAL(DNAPATH)}/cnewSubwithVoiceSigAndLocation,${GLOBAL(MYPHONENUMBER)})

;some control
;check if the Number was well registered in the dna
exten => #, n, AGI(${GLOBAL(DNAPATH)}/checkNumberRegister,${GLOBAL(MYPHONENUMBER)})
exten => #, n, ReadFile(checkNumber=${GLOBAL(TEMPPATH)}/checkNumberRegister.tmp)
exten => #, n, NoOp(${checkNumber})
exten => #, n, GotoIf($[${checkNumber}=1]?numberCheck:numberError)

exten => #, n(numberCheck),AGI(${GLOBAL(DNAPATH)}/checkLocation,${GLOBAL(MYPHONENUMBER)})
exten => #, n, ReadFile(checkLocation=${GLOBAL(TEMPPATH)}/checkLocation.tmp)
exten => #, n, NoOp(${checkLocation})
exten => #, n, GotoIf($[${checkLocation}=1]?locationCheck:locationError)

exten => #, n(locationCheck),AGI(${GLOBAL(DNAPATH)}/checkVoiceSig, ${GLOBAL(MYPHONENUMBER)})
exten => #, n, ReadFile(checkVoiceSig=${GLOBAL(TEMPPATH)}/checkVoiceSig.tmp)
exten => #, n, NoOp(${checkVoiceSig})
exten => #, n, GotoIf($[${checkVoiceSig}=1]?voiceSigCheck:voiceSigError)

exten => #, n(voiceSigCheck), Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/numberRecordWithSuccess)
exten => #, n, HangUp()

exten => #, n(voiceSigError), AGI(${GLOBAL(DNAPATH)/setVoiceSig,${GLOBAL(MYPHONENUMBER)}
exten => #, n, Goto(recordVoiceSignature,#,locationCheck)

exten => #, n(locationError),AGI(${GLOBAL(DNAPATH)}/setLocation,${GLOBAL(MYPHONENUMBER)}
exten => #, n, Goto(recordVoiceSignature,#,numberCheck)


exten => #, n(numberError), Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/thereWasAnError)
exten => #, n, Goto(registerPhoneNumber,s,registerYourPhoneNumber)

[default]
;;;;;;;;;;;;;;;;;;
; incoming call  ;
;;;;;;;;;;;;;;;;;;
#include "gatewayextensions.conf"
exten => 4000,1,Dial(SIP/4000)
exten => 4000,2,AGI(${GLOBAL(TEMPPATH)}/removeTempAfterCall)
;;;;;;;;;;;;;;;;;;
; dial a number  ;
;;;;;;;;;;;;;;;;;;

; 1,2 or 3 digit dialling of last octet
exten => _X,1,Dial(SIP/4000@10.130.1.${EXTEN})
exten => _XX,1,Dial(SIP/4000@10.130.1.${EXTEN})
exten => _XXX,1,Dial(SIP/4000@10.130.1.${EXTEN})

exten => _XXXXX., 1, Set(GLOBAL(IWANTTOCALL)=${EXTEN})
exten => _XXXXX., n, Goto(makeCall,s,1)

[defaultAfterFirstUse]
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; register your phone number in the irv  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
exten => 411, 1, Goto(registerPhoneNumber,s,1 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; record a song (put the right path) ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
exten => 4004, 1, Record(${GLOBAL(SOUNDPATH)}/en/thereWasAnError.gsm)
exten => 4004, 2, Playback(${GLOBAL(SOUNDPATH)}/en/thereWasAnError)

;;;;;;;;;;;;;;
; test echo  ;
;;;;;;;;;;;;;;
exten => 4001,1,Answer
exten => 4001,2,Echo

;;;;;;;;;;;
;test say ;
;;;;;;;;;;;
exten => 408, 1, SayPhonetic(1234)



; full a*b*c*d IP dialling, e.g. 10*130*1*144*
;exten => _X.,1,Set(OCTETS=${EXTEN})
;exten => _X.,n,Set(IP=${CUT(OCTETS,*,1)}.${CUT(OCTETS,*,2)}.${CUT(OCTETS,*,3)}.${CUT(OCTETS,*,4)})
;exten => _X.,n,Dial(SIP/4000@${IP})

; C-O-N-F -> 2663 to set the IP of this IP04


[makeCall]
;if it the first time the user make a call
exten => s, 1, AGI(${GLOBAL(DNAPATH)}/isFirstCall)
exten => s, n, ReadFile(firstCall=${GLOBAL(TEMPPATH)}/isFirst.tmp,1)
exten => s, n, NoOp(${firstCall})
exten => s, n, GotoIf($[${firstCall}=1]?irv:checkNumberExist)

;;;;;;;;;;;;;;;;;;;;;;;;
; first time use phone ;
;;;;;;;;;;;;;;;;;;;;;;;;
exten => s, n(irv), Goto(irv,s,1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;check if the number exist ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
exten => s, n(checkNumberExist), SDNALookup(${GLOBAL(IWANTTOCALL)})
exten => s, n, GotoIf($["${SDNALOCATION}"=""]?notExisting)
exten => s, n, ReadFile(myNumber=${GLOBAL(TEMPPATH)}/myNumber.tmp)
exten => s, n, set(CALLERID(num)=${myNumber})
exten => s, n, Dial(SIP/"${SDNALOCATION}")
exten => s, n, Hangup()

;;;;;;;;;;;;;;;;;;;;;;;
; number do not exist ;
;;;;;;;;;;;;;;;;;;;;;;;

exten => s, n(notExisting), ReadFile(sizeCall=${GLOBAL(TEMPPATH)}/sizeNumberIwantToCall.tmp)
exten => s, n, NoOp(${sizeCall})
exten => s, n, GotoIf($[${sizeCall}>3]?wrongNumber:tryspecial)
exten => s, n(wrongNumber), Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/numberDoNotExist)
exten => s, n(tryspecial), Goto(defaultAfterFirstUse,${GLOBAL(IWANTTOCALL)},1)

;;;;;;;;;;;;;;;;;;;;
; The number exist ;
;;;;;;;;;;;;;;;;;;;;

;find voice signature
exten => s, n(followCall),Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/connectAttempt)
exten => s, n, AGI(${GLOBAL(DNAPATH)}/findVoiceSig,${GLOBAL(IWANTTOCALL)})

exten => s, n, AGI(${GLOBAL(DNAPATH)}/isVoiceFound)
exten => s, n, ReadFile(voiceSigFound=${GLOBAL(TEMPPATH)}/voiceSigFound.tmp,1)
exten => s, n, NoOp(${voiceSigFound})
exten => s, n, GotoIf($[${voiceSigFound}=1]?voiceFound:tryAgainVoice)

exten => s, n(tryAgainVoice),Goto(makeCall,s,followCall)

exten => s, n(voiceFound), Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/ifYouWantToCall)
exten => s, n, Playback(${GLOBAL(TEMPPATH)}/voicesig)
exten => s, n, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/pleasePressSharp)
exten => s, n, WaitExten()
;touch # say ok
;search location 
exten => #, 1, Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/connectAttempt)
exten => #, n, AGI(${GLOBAL(DNAPATH)}/findLocation,${GLOBAL(IWANTTOCALL)})

exten => #, n, AGI(${GLOBAL(DNAPATH)}/isLocationFound)
exten => #, n, ReadFile(locationFound=${GLOBAL(TEMPPATH)}/locationFound.tmp,1)
exten => #, n, NoOp(${locationFound})
exten => #, n, GotoIf($[${locationFound}=1]?locationFound:tryAgainLocation)

exten => #, n(tryAgainLocation), Goto(makeCall,#,1)

exten => #, n(locationFound), ReadFile(location=${GLOBAL(TEMPPATH)}/location.tmp)
;call the number
exten => #, n, ReadFile(myNumber=${GLOBAL(TEMPPATH)}/myNumber.tmp)
exten => #, n, set(CALLERID(num)=${myNumber})
exten => #, n, Dial(SIP/${location})
;any touch but # do not call but goodby
exten => i, 1, Hangup()
;wait to much time
exten => t, 1, Hangup()

[dnagatewayinbound]
; PGS XXX - play greeting, read number, lookup LOCAL ONLY, i.e., no 4101* gateway mediated calls
; XXX - Actually, we want gateway mediated, just not gateway to internet mediated.
; XXX - Give user ability to terminate all inbound to self versus mesh? Or to terminate if timeout on entering number?
exten => s,1 Background(${GLOBAL(SOUNDPATH)}/${GLOBAL(CHOSENLANG)}/gatewayextensionprompt)
exten => s,2, Read(IWANTTOCALL,,20,,2)
exten => #,3, set(CALLERID(num)="via PSTN Gateway")
exten => #,4, SDNALookup(${GLOBAL(IWANTTOCALL)})
exten => #,5, GotoIf($["${SDNALOCATION}"=""]?notOnMesh)

; Filter out for 41XX* here
exten => #,6, GotoIf($["${SDNALOCATION}"~="41..\**"]?notOnMesh)
exten => #, n, Dial(SIP/"${SDNALOCATION}")
exten => #, n, Hangup()
exten => s, n(notOnMesh), 